// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: video_read.sql

package catalogsql

import (
	"context"

	uuid "github.com/google/uuid"
)

const findVideoByID = `-- name: FindVideoByID :one

SELECT
    video_id,
    title,
    status,
    media_status,
    analysis_status,
    created_at,
    updated_at
FROM catalog.videos_ready_view
WHERE video_id = $1
`

// Video 只读视图查询相关 SQL
// 根据 video_id 从只读视图查询视频详情（仅返回 ready/published 状态的视频）
func (q *Queries) FindVideoByID(ctx context.Context, videoID uuid.UUID) (CatalogVideosReadyView, error) {
	row := q.db.QueryRow(ctx, findVideoByID, videoID)
	var i CatalogVideosReadyView
	err := row.Scan(
		&i.VideoID,
		&i.Title,
		&i.Status,
		&i.MediaStatus,
		&i.AnalysisStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listReadyVideosForTest = `-- name: ListReadyVideosForTest :many
SELECT
    video_id,
    title,
    status,
    media_status,
    analysis_status,
    created_at,
    updated_at
FROM catalog.videos_ready_view
ORDER BY created_at DESC
`

func (q *Queries) ListReadyVideosForTest(ctx context.Context) ([]CatalogVideosReadyView, error) {
	rows, err := q.db.Query(ctx, listReadyVideosForTest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CatalogVideosReadyView{}
	for rows.Next() {
		var i CatalogVideosReadyView
		if err := rows.Scan(
			&i.VideoID,
			&i.Title,
			&i.Status,
			&i.MediaStatus,
			&i.AnalysisStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
