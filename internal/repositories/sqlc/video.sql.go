// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: video.sql

package catalogsql

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const claimPendingOutboxEvents = `-- name: ClaimPendingOutboxEvents :many
SELECT
    event_id,
    aggregate_type,
    aggregate_id,
    event_type,
    payload,
    headers,
    occurred_at,
    available_at,
    published_at,
    delivery_attempts,
    last_error
FROM catalog.outbox_events
WHERE published_at IS NULL
  AND available_at <= $1
ORDER BY available_at
FOR UPDATE SKIP LOCKED
LIMIT $2
`

type ClaimPendingOutboxEventsParams struct {
	AvailableAt pgtype.Timestamptz `json:"available_at"`
	Limit       int32              `json:"limit"`
}

func (q *Queries) ClaimPendingOutboxEvents(ctx context.Context, arg ClaimPendingOutboxEventsParams) ([]CatalogOutboxEvent, error) {
	rows, err := q.db.Query(ctx, claimPendingOutboxEvents, arg.AvailableAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CatalogOutboxEvent{}
	for rows.Next() {
		var i CatalogOutboxEvent
		if err := rows.Scan(
			&i.EventID,
			&i.AggregateType,
			&i.AggregateID,
			&i.EventType,
			&i.Payload,
			&i.Headers,
			&i.OccurredAt,
			&i.AvailableAt,
			&i.PublishedAt,
			&i.DeliveryAttempts,
			&i.LastError,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createVideo = `-- name: CreateVideo :one

INSERT INTO catalog.videos (
    upload_user_id,
    created_at,
    updated_at,
    title,
    description,
    raw_file_reference,
    status,
    media_status,
    analysis_status
) VALUES (
    $1,
    now(),
    now(),
    $2,
    $4,
    $3,
    'pending_upload',
    'pending',
    'pending'
)
RETURNING
    video_id,
    upload_user_id,
    created_at,
    updated_at,
    title,
    description,
    raw_file_reference,
    status,
    media_status,
    analysis_status,
    raw_file_size,
    raw_resolution,
    raw_bitrate,
    duration_micros,
    encoded_resolution,
    encoded_bitrate,
    thumbnail_url,
    hls_master_playlist,
    difficulty,
    summary,
    tags,
    raw_subtitle_url,
    error_message
`

type CreateVideoParams struct {
	UploadUserID     uuid.UUID   `json:"upload_user_id"`
	Title            string      `json:"title"`
	RawFileReference string      `json:"raw_file_reference"`
	Description      pgtype.Text `json:"description"`
}

// Video 业务相关的 SQL 查询定义
// 由 sqlc 生成类型安全的 Go 代码
// 创建新视频记录，video_id 由数据库自动生成
func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (CatalogVideo, error) {
	row := q.db.QueryRow(ctx, createVideo,
		arg.UploadUserID,
		arg.Title,
		arg.RawFileReference,
		arg.Description,
	)
	var i CatalogVideo
	err := row.Scan(
		&i.VideoID,
		&i.UploadUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.RawFileReference,
		&i.Status,
		&i.MediaStatus,
		&i.AnalysisStatus,
		&i.RawFileSize,
		&i.RawResolution,
		&i.RawBitrate,
		&i.DurationMicros,
		&i.EncodedResolution,
		&i.EncodedBitrate,
		&i.ThumbnailUrl,
		&i.HlsMasterPlaylist,
		&i.Difficulty,
		&i.Summary,
		&i.Tags,
		&i.RawSubtitleUrl,
		&i.ErrorMessage,
	)
	return i, err
}

const findVideoByID = `-- name: FindVideoByID :one
SELECT
    video_id,
    title,
    status,
    media_status,
    analysis_status,
    created_at,
    updated_at
FROM catalog.videos_ready_view
WHERE video_id = $1
`

// 根据 video_id 从只读视图查询视频详情（仅返回 ready/published 状态的视频）
func (q *Queries) FindVideoByID(ctx context.Context, videoID uuid.UUID) (CatalogVideosReadyView, error) {
	row := q.db.QueryRow(ctx, findVideoByID, videoID)
	var i CatalogVideosReadyView
	err := row.Scan(
		&i.VideoID,
		&i.Title,
		&i.Status,
		&i.MediaStatus,
		&i.AnalysisStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInboxEvent = `-- name: GetInboxEvent :one
SELECT
    event_id,
    source_service,
    event_type,
    aggregate_type,
    aggregate_id,
    payload,
    received_at,
    processed_at,
    last_error
FROM catalog.inbox_events
WHERE event_id = $1
`

func (q *Queries) GetInboxEvent(ctx context.Context, eventID uuid.UUID) (CatalogInboxEvent, error) {
	row := q.db.QueryRow(ctx, getInboxEvent, eventID)
	var i CatalogInboxEvent
	err := row.Scan(
		&i.EventID,
		&i.SourceService,
		&i.EventType,
		&i.AggregateType,
		&i.AggregateID,
		&i.Payload,
		&i.ReceivedAt,
		&i.ProcessedAt,
		&i.LastError,
	)
	return i, err
}

const insertInboxEvent = `-- name: InsertInboxEvent :exec

INSERT INTO catalog.inbox_events (
    event_id,
    source_service,
    event_type,
    aggregate_type,
    aggregate_id,
    payload
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
ON CONFLICT (event_id) DO NOTHING
`

type InsertInboxEventParams struct {
	EventID       uuid.UUID   `json:"event_id"`
	SourceService string      `json:"source_service"`
	EventType     string      `json:"event_type"`
	AggregateType pgtype.Text `json:"aggregate_type"`
	AggregateID   pgtype.Text `json:"aggregate_id"`
	Payload       []byte      `json:"payload"`
}

// ============================================
// Inbox 相关查询
// ============================================
func (q *Queries) InsertInboxEvent(ctx context.Context, arg InsertInboxEventParams) error {
	_, err := q.db.Exec(ctx, insertInboxEvent,
		arg.EventID,
		arg.SourceService,
		arg.EventType,
		arg.AggregateType,
		arg.AggregateID,
		arg.Payload,
	)
	return err
}

const insertOutboxEvent = `-- name: InsertOutboxEvent :one

INSERT INTO catalog.outbox_events (
    event_id,
    aggregate_type,
    aggregate_id,
    event_type,
    payload,
    headers,
    available_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING
    event_id,
    aggregate_type,
    aggregate_id,
    event_type,
    payload,
    headers,
    occurred_at,
    available_at,
    published_at,
    delivery_attempts,
    last_error
`

type InsertOutboxEventParams struct {
	EventID       uuid.UUID          `json:"event_id"`
	AggregateType string             `json:"aggregate_type"`
	AggregateID   uuid.UUID          `json:"aggregate_id"`
	EventType     string             `json:"event_type"`
	Payload       []byte             `json:"payload"`
	Headers       []byte             `json:"headers"`
	AvailableAt   pgtype.Timestamptz `json:"available_at"`
}

// ============================================
// Outbox 相关查询
// ============================================
func (q *Queries) InsertOutboxEvent(ctx context.Context, arg InsertOutboxEventParams) (CatalogOutboxEvent, error) {
	row := q.db.QueryRow(ctx, insertOutboxEvent,
		arg.EventID,
		arg.AggregateType,
		arg.AggregateID,
		arg.EventType,
		arg.Payload,
		arg.Headers,
		arg.AvailableAt,
	)
	var i CatalogOutboxEvent
	err := row.Scan(
		&i.EventID,
		&i.AggregateType,
		&i.AggregateID,
		&i.EventType,
		&i.Payload,
		&i.Headers,
		&i.OccurredAt,
		&i.AvailableAt,
		&i.PublishedAt,
		&i.DeliveryAttempts,
		&i.LastError,
	)
	return i, err
}

const listReadyVideosForTest = `-- name: ListReadyVideosForTest :many

SELECT
    video_id,
    title,
    status,
    media_status,
    analysis_status,
    created_at,
    updated_at
FROM catalog.videos_ready_view
ORDER BY created_at DESC
`

// ============================================
// 测试视图查询
// ============================================
func (q *Queries) ListReadyVideosForTest(ctx context.Context) ([]CatalogVideosReadyView, error) {
	rows, err := q.db.Query(ctx, listReadyVideosForTest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CatalogVideosReadyView{}
	for rows.Next() {
		var i CatalogVideosReadyView
		if err := rows.Scan(
			&i.VideoID,
			&i.Title,
			&i.Status,
			&i.MediaStatus,
			&i.AnalysisStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markInboxEventProcessed = `-- name: MarkInboxEventProcessed :exec
UPDATE catalog.inbox_events
SET processed_at = $2,
    last_error = NULL
WHERE event_id = $1
`

type MarkInboxEventProcessedParams struct {
	EventID     uuid.UUID          `json:"event_id"`
	ProcessedAt pgtype.Timestamptz `json:"processed_at"`
}

func (q *Queries) MarkInboxEventProcessed(ctx context.Context, arg MarkInboxEventProcessedParams) error {
	_, err := q.db.Exec(ctx, markInboxEventProcessed, arg.EventID, arg.ProcessedAt)
	return err
}

const markOutboxEventPublished = `-- name: MarkOutboxEventPublished :exec
UPDATE catalog.outbox_events
SET published_at = $2,
    delivery_attempts = delivery_attempts + 1,
    last_error = NULL
WHERE event_id = $1
`

type MarkOutboxEventPublishedParams struct {
	EventID     uuid.UUID          `json:"event_id"`
	PublishedAt pgtype.Timestamptz `json:"published_at"`
}

func (q *Queries) MarkOutboxEventPublished(ctx context.Context, arg MarkOutboxEventPublishedParams) error {
	_, err := q.db.Exec(ctx, markOutboxEventPublished, arg.EventID, arg.PublishedAt)
	return err
}

const recordInboxEventError = `-- name: RecordInboxEventError :exec
UPDATE catalog.inbox_events
SET last_error = $2,
    processed_at = NULL
WHERE event_id = $1
`

type RecordInboxEventErrorParams struct {
	EventID   uuid.UUID   `json:"event_id"`
	LastError pgtype.Text `json:"last_error"`
}

func (q *Queries) RecordInboxEventError(ctx context.Context, arg RecordInboxEventErrorParams) error {
	_, err := q.db.Exec(ctx, recordInboxEventError, arg.EventID, arg.LastError)
	return err
}

const rescheduleOutboxEvent = `-- name: RescheduleOutboxEvent :exec
UPDATE catalog.outbox_events
SET delivery_attempts = delivery_attempts + 1,
    last_error = $2,
    available_at = $3
WHERE event_id = $1
`

type RescheduleOutboxEventParams struct {
	EventID     uuid.UUID          `json:"event_id"`
	LastError   pgtype.Text        `json:"last_error"`
	AvailableAt pgtype.Timestamptz `json:"available_at"`
}

func (q *Queries) RescheduleOutboxEvent(ctx context.Context, arg RescheduleOutboxEventParams) error {
	_, err := q.db.Exec(ctx, rescheduleOutboxEvent, arg.EventID, arg.LastError, arg.AvailableAt)
	return err
}
