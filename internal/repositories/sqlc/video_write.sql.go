// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: video_write.sql

package catalogsql

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createVideo = `-- name: CreateVideo :one

INSERT INTO catalog.videos (
    upload_user_id,
    created_at,
    updated_at,
    title,
    description,
    raw_file_reference,
    status,
    media_status,
    analysis_status
) VALUES (
    $1,
    now(),
    now(),
    $2,
    $4,
    $3,
    'pending_upload',
    'pending',
    'pending'
)
RETURNING
    video_id,
    upload_user_id,
    created_at,
    updated_at,
    title,
    description,
    raw_file_reference,
    status,
    media_status,
    analysis_status,
    raw_file_size,
    raw_resolution,
    raw_bitrate,
    duration_micros,
    encoded_resolution,
    encoded_bitrate,
    thumbnail_url,
    hls_master_playlist,
    difficulty,
    summary,
    tags,
    raw_subtitle_url,
    error_message
`

type CreateVideoParams struct {
	UploadUserID     uuid.UUID   `json:"upload_user_id"`
	Title            string      `json:"title"`
	RawFileReference string      `json:"raw_file_reference"`
	Description      pgtype.Text `json:"description"`
}

// Video 主表写入相关 SQL
// 创建新视频记录，video_id 由数据库自动生成
func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (CatalogVideo, error) {
	row := q.db.QueryRow(ctx, createVideo,
		arg.UploadUserID,
		arg.Title,
		arg.RawFileReference,
		arg.Description,
	)
	var i CatalogVideo
	err := row.Scan(
		&i.VideoID,
		&i.UploadUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.RawFileReference,
		&i.Status,
		&i.MediaStatus,
		&i.AnalysisStatus,
		&i.RawFileSize,
		&i.RawResolution,
		&i.RawBitrate,
		&i.DurationMicros,
		&i.EncodedResolution,
		&i.EncodedBitrate,
		&i.ThumbnailUrl,
		&i.HlsMasterPlaylist,
		&i.Difficulty,
		&i.Summary,
		&i.Tags,
		&i.RawSubtitleUrl,
		&i.ErrorMessage,
	)
	return i, err
}
