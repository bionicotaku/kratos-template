// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package catalogsql

import (
	"database/sql/driver"
	"fmt"

	po "github.com/bionicotaku/kratos-template/internal/models/po"
	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CatalogStageStatus string

const (
	CatalogStageStatusPending    CatalogStageStatus = "pending"
	CatalogStageStatusProcessing CatalogStageStatus = "processing"
	CatalogStageStatusReady      CatalogStageStatus = "ready"
	CatalogStageStatusFailed     CatalogStageStatus = "failed"
)

func (e *CatalogStageStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CatalogStageStatus(s)
	case string:
		*e = CatalogStageStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CatalogStageStatus: %T", src)
	}
	return nil
}

type NullCatalogStageStatus struct {
	CatalogStageStatus CatalogStageStatus `json:"catalog_stage_status"`
	Valid              bool               `json:"valid"` // Valid is true if CatalogStageStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCatalogStageStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CatalogStageStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CatalogStageStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCatalogStageStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CatalogStageStatus), nil
}

type CatalogVideoStatus string

const (
	CatalogVideoStatusPendingUpload CatalogVideoStatus = "pending_upload"
	CatalogVideoStatusProcessing    CatalogVideoStatus = "processing"
	CatalogVideoStatusReady         CatalogVideoStatus = "ready"
	CatalogVideoStatusPublished     CatalogVideoStatus = "published"
	CatalogVideoStatusFailed        CatalogVideoStatus = "failed"
	CatalogVideoStatusRejected      CatalogVideoStatus = "rejected"
	CatalogVideoStatusArchived      CatalogVideoStatus = "archived"
)

func (e *CatalogVideoStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CatalogVideoStatus(s)
	case string:
		*e = CatalogVideoStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CatalogVideoStatus: %T", src)
	}
	return nil
}

type NullCatalogVideoStatus struct {
	CatalogVideoStatus CatalogVideoStatus `json:"catalog_video_status"`
	Valid              bool               `json:"valid"` // Valid is true if CatalogVideoStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCatalogVideoStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CatalogVideoStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CatalogVideoStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCatalogVideoStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CatalogVideoStatus), nil
}

type CatalogInboxEvent struct {
	EventID       uuid.UUID          `json:"event_id"`
	SourceService string             `json:"source_service"`
	EventType     string             `json:"event_type"`
	AggregateType pgtype.Text        `json:"aggregate_type"`
	AggregateID   pgtype.Text        `json:"aggregate_id"`
	Payload       []byte             `json:"payload"`
	ReceivedAt    pgtype.Timestamptz `json:"received_at"`
	ProcessedAt   pgtype.Timestamptz `json:"processed_at"`
	LastError     pgtype.Text        `json:"last_error"`
}

type CatalogOutboxEvent struct {
	EventID          uuid.UUID          `json:"event_id"`
	AggregateType    string             `json:"aggregate_type"`
	AggregateID      uuid.UUID          `json:"aggregate_id"`
	EventType        string             `json:"event_type"`
	Payload          []byte             `json:"payload"`
	Headers          []byte             `json:"headers"`
	OccurredAt       pgtype.Timestamptz `json:"occurred_at"`
	AvailableAt      pgtype.Timestamptz `json:"available_at"`
	PublishedAt      pgtype.Timestamptz `json:"published_at"`
	DeliveryAttempts int32              `json:"delivery_attempts"`
	LastError        pgtype.Text        `json:"last_error"`
}

type CatalogVideo struct {
	VideoID           uuid.UUID          `json:"video_id"`
	UploadUserID      uuid.UUID          `json:"upload_user_id"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	Title             string             `json:"title"`
	Description       pgtype.Text        `json:"description"`
	RawFileReference  string             `json:"raw_file_reference"`
	Status            po.VideoStatus     `json:"status"`
	MediaStatus       po.StageStatus     `json:"media_status"`
	AnalysisStatus    po.StageStatus     `json:"analysis_status"`
	RawFileSize       pgtype.Int8        `json:"raw_file_size"`
	RawResolution     pgtype.Text        `json:"raw_resolution"`
	RawBitrate        pgtype.Int4        `json:"raw_bitrate"`
	DurationMicros    pgtype.Int8        `json:"duration_micros"`
	EncodedResolution pgtype.Text        `json:"encoded_resolution"`
	EncodedBitrate    pgtype.Int4        `json:"encoded_bitrate"`
	ThumbnailUrl      pgtype.Text        `json:"thumbnail_url"`
	HlsMasterPlaylist pgtype.Text        `json:"hls_master_playlist"`
	Difficulty        pgtype.Text        `json:"difficulty"`
	Summary           pgtype.Text        `json:"summary"`
	Tags              []string           `json:"tags"`
	RawSubtitleUrl    pgtype.Text        `json:"raw_subtitle_url"`
	ErrorMessage      pgtype.Text        `json:"error_message"`
}

type CatalogVideosReadyView struct {
	VideoID        uuid.UUID          `json:"video_id"`
	Title          string             `json:"title"`
	Status         po.VideoStatus     `json:"status"`
	MediaStatus    po.StageStatus     `json:"media_status"`
	AnalysisStatus po.StageStatus     `json:"analysis_status"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}
