// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/infrastructure/config_loader/pb/conf.proto

package configpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Bootstrap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bootstrap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bootstrap with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BootstrapMultiError, or nil
// if none found.
func (m *Bootstrap) ValidateAll() error {
	return m.validate(true)
}

func (m *Bootstrap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Server",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObservability()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Observability",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Observability",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObservability()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Observability",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BootstrapMultiError(errors)
	}

	return nil
}

// BootstrapMultiError is an error wrapping multiple validation errors returned
// by Bootstrap.ValidateAll() if the designated constraints aren't met.
type BootstrapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BootstrapMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BootstrapMultiError) AllErrors() []error { return m }

// BootstrapValidationError is the validation error returned by
// Bootstrap.Validate if the designated constraints aren't met.
type BootstrapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapValidationError) ErrorName() string { return "BootstrapValidationError" }

// Error satisfies the builtin error interface
func (e BootstrapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapValidationError{}

// Validate checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServerMultiError, or nil if none found.
func (m *Server) ValidateAll() error {
	return m.validate(true)
}

func (m *Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGrpc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Grpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Jwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerMultiError(errors)
	}

	return nil
}

// ServerMultiError is an error wrapping multiple validation errors returned by
// Server.ValidateAll() if the designated constraints aren't met.
type ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMultiError) AllErrors() []error { return m }

// ServerValidationError is the validation error returned by Server.Validate if
// the designated constraints aren't met.
type ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerValidationError) ErrorName() string { return "ServerValidationError" }

// Error satisfies the builtin error interface
func (e ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DataMultiError, or nil if none found.
func (m *Data) ValidateAll() error {
	return m.validate(true)
}

func (m *Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostgres() == nil {
		err := DataValidationError{
			field:  "Postgres",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPostgres()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Postgres",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Postgres",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPostgres()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Postgres",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrpcClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "GrpcClient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "GrpcClient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrpcClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "GrpcClient",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DataMultiError(errors)
	}

	return nil
}

// DataMultiError is an error wrapping multiple validation errors returned by
// Data.ValidateAll() if the designated constraints aren't met.
type DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataMultiError) AllErrors() []error { return m }

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}

// Validate checks the field values on Observability with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Observability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Observability with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ObservabilityMultiError, or
// nil if none found.
func (m *Observability) ValidateAll() error {
	return m.validate(true)
}

func (m *Observability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GlobalAttributes

	if all {
		switch v := interface{}(m.GetTracing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObservabilityValidationError{
					field:  "Tracing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObservabilityValidationError{
					field:  "Tracing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTracing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObservabilityValidationError{
				field:  "Tracing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetrics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObservabilityValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObservabilityValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetrics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObservabilityValidationError{
				field:  "Metrics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObservabilityMultiError(errors)
	}

	return nil
}

// ObservabilityMultiError is an error wrapping multiple validation errors
// returned by Observability.ValidateAll() if the designated constraints
// aren't met.
type ObservabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObservabilityMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObservabilityMultiError) AllErrors() []error { return m }

// ObservabilityValidationError is the validation error returned by
// Observability.Validate if the designated constraints aren't met.
type ObservabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObservabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObservabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObservabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObservabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObservabilityValidationError) ErrorName() string { return "ObservabilityValidationError" }

// Error satisfies the builtin error interface
func (e ObservabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObservability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObservabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObservabilityValidationError{}

// Validate checks the field values on Server_GRPC with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server_GRPC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_GRPC with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Server_GRPCMultiError, or
// nil if none found.
func (m *Server_GRPC) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_GRPC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Network

	// no validation rules for Addr

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_GRPCValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_GRPCValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_GRPCValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Server_GRPCMultiError(errors)
	}

	return nil
}

// Server_GRPCMultiError is an error wrapping multiple validation errors
// returned by Server_GRPC.ValidateAll() if the designated constraints aren't met.
type Server_GRPCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_GRPCMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_GRPCMultiError) AllErrors() []error { return m }

// Server_GRPCValidationError is the validation error returned by
// Server_GRPC.Validate if the designated constraints aren't met.
type Server_GRPCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_GRPCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_GRPCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_GRPCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_GRPCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_GRPCValidationError) ErrorName() string { return "Server_GRPCValidationError" }

// Error satisfies the builtin error interface
func (e Server_GRPCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_GRPC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_GRPCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_GRPCValidationError{}

// Validate checks the field values on Server_JWT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server_JWT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_JWT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Server_JWTMultiError, or
// nil if none found.
func (m *Server_JWT) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_JWT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExpectedAudience

	// no validation rules for SkipValidate

	// no validation rules for Required

	// no validation rules for HeaderKey

	if len(errors) > 0 {
		return Server_JWTMultiError(errors)
	}

	return nil
}

// Server_JWTMultiError is an error wrapping multiple validation errors
// returned by Server_JWT.ValidateAll() if the designated constraints aren't met.
type Server_JWTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_JWTMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_JWTMultiError) AllErrors() []error { return m }

// Server_JWTValidationError is the validation error returned by
// Server_JWT.Validate if the designated constraints aren't met.
type Server_JWTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_JWTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_JWTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_JWTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_JWTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_JWTValidationError) ErrorName() string { return "Server_JWTValidationError" }

// Error satisfies the builtin error interface
func (e Server_JWTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_JWT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_JWTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_JWTValidationError{}

// Validate checks the field values on Data_PostgreSQL with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Data_PostgreSQL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data_PostgreSQL with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Data_PostgreSQLMultiError, or nil if none found.
func (m *Data_PostgreSQL) ValidateAll() error {
	return m.validate(true)
}

func (m *Data_PostgreSQL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDsn()) < 1 {
		err := Data_PostgreSQLValidationError{
			field:  "Dsn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Data_PostgreSQL_Dsn_Pattern.MatchString(m.GetDsn()) {
		err := Data_PostgreSQLValidationError{
			field:  "Dsn",
			reason: "value does not match regex pattern \"^postgres(ql)?://.*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetMaxOpenConns(); val < 1 || val > 100 {
		err := Data_PostgreSQLValidationError{
			field:  "MaxOpenConns",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetMinOpenConns(); val < 0 || val > 50 {
		err := Data_PostgreSQLValidationError{
			field:  "MinOpenConns",
			reason: "value must be inside range [0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMaxConnLifetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Data_PostgreSQLValidationError{
					field:  "MaxConnLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Data_PostgreSQLValidationError{
					field:  "MaxConnLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxConnLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Data_PostgreSQLValidationError{
				field:  "MaxConnLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxConnIdleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Data_PostgreSQLValidationError{
					field:  "MaxConnIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Data_PostgreSQLValidationError{
					field:  "MaxConnIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxConnIdleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Data_PostgreSQLValidationError{
				field:  "MaxConnIdleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHealthCheckPeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Data_PostgreSQLValidationError{
					field:  "HealthCheckPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Data_PostgreSQLValidationError{
					field:  "HealthCheckPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthCheckPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Data_PostgreSQLValidationError{
				field:  "HealthCheckPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Schema

	// no validation rules for EnablePreparedStatements

	if len(errors) > 0 {
		return Data_PostgreSQLMultiError(errors)
	}

	return nil
}

// Data_PostgreSQLMultiError is an error wrapping multiple validation errors
// returned by Data_PostgreSQL.ValidateAll() if the designated constraints
// aren't met.
type Data_PostgreSQLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Data_PostgreSQLMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Data_PostgreSQLMultiError) AllErrors() []error { return m }

// Data_PostgreSQLValidationError is the validation error returned by
// Data_PostgreSQL.Validate if the designated constraints aren't met.
type Data_PostgreSQLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Data_PostgreSQLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Data_PostgreSQLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Data_PostgreSQLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Data_PostgreSQLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Data_PostgreSQLValidationError) ErrorName() string { return "Data_PostgreSQLValidationError" }

// Error satisfies the builtin error interface
func (e Data_PostgreSQLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData_PostgreSQL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Data_PostgreSQLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Data_PostgreSQLValidationError{}

var _Data_PostgreSQL_Dsn_Pattern = regexp.MustCompile("^postgres(ql)?://.*")

// Validate checks the field values on Data_Client with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Data_Client) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data_Client with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Data_ClientMultiError, or
// nil if none found.
func (m *Data_Client) ValidateAll() error {
	return m.validate(true)
}

func (m *Data_Client) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Target

	if all {
		switch v := interface{}(m.GetJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Data_ClientValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Data_ClientValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Data_ClientValidationError{
				field:  "Jwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Data_ClientMultiError(errors)
	}

	return nil
}

// Data_ClientMultiError is an error wrapping multiple validation errors
// returned by Data_Client.ValidateAll() if the designated constraints aren't met.
type Data_ClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Data_ClientMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Data_ClientMultiError) AllErrors() []error { return m }

// Data_ClientValidationError is the validation error returned by
// Data_Client.Validate if the designated constraints aren't met.
type Data_ClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Data_ClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Data_ClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Data_ClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Data_ClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Data_ClientValidationError) ErrorName() string { return "Data_ClientValidationError" }

// Error satisfies the builtin error interface
func (e Data_ClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData_Client.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Data_ClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Data_ClientValidationError{}

// Validate checks the field values on Data_Client_JWT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Data_Client_JWT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data_Client_JWT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Data_Client_JWTMultiError, or nil if none found.
func (m *Data_Client_JWT) ValidateAll() error {
	return m.validate(true)
}

func (m *Data_Client_JWT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Audience

	// no validation rules for Disabled

	// no validation rules for HeaderKey

	if len(errors) > 0 {
		return Data_Client_JWTMultiError(errors)
	}

	return nil
}

// Data_Client_JWTMultiError is an error wrapping multiple validation errors
// returned by Data_Client_JWT.ValidateAll() if the designated constraints
// aren't met.
type Data_Client_JWTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Data_Client_JWTMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Data_Client_JWTMultiError) AllErrors() []error { return m }

// Data_Client_JWTValidationError is the validation error returned by
// Data_Client_JWT.Validate if the designated constraints aren't met.
type Data_Client_JWTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Data_Client_JWTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Data_Client_JWTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Data_Client_JWTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Data_Client_JWTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Data_Client_JWTValidationError) ErrorName() string { return "Data_Client_JWTValidationError" }

// Error satisfies the builtin error interface
func (e Data_Client_JWTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData_Client_JWT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Data_Client_JWTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Data_Client_JWTValidationError{}

// Validate checks the field values on Observability_Tracing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Observability_Tracing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Observability_Tracing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Observability_TracingMultiError, or nil if none found.
func (m *Observability_Tracing) ValidateAll() error {
	return m.validate(true)
}

func (m *Observability_Tracing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Exporter

	// no validation rules for Endpoint

	// no validation rules for Headers

	// no validation rules for Insecure

	// no validation rules for SamplingRatio

	if all {
		switch v := interface{}(m.GetBatchTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Observability_TracingValidationError{
					field:  "BatchTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Observability_TracingValidationError{
					field:  "BatchTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBatchTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Observability_TracingValidationError{
				field:  "BatchTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExportTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Observability_TracingValidationError{
					field:  "ExportTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Observability_TracingValidationError{
					field:  "ExportTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExportTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Observability_TracingValidationError{
				field:  "ExportTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxQueueSize

	// no validation rules for MaxExportBatchSize

	// no validation rules for Required

	// no validation rules for ServiceName

	// no validation rules for ServiceVersion

	// no validation rules for Environment

	// no validation rules for Attributes

	if len(errors) > 0 {
		return Observability_TracingMultiError(errors)
	}

	return nil
}

// Observability_TracingMultiError is an error wrapping multiple validation
// errors returned by Observability_Tracing.ValidateAll() if the designated
// constraints aren't met.
type Observability_TracingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Observability_TracingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Observability_TracingMultiError) AllErrors() []error { return m }

// Observability_TracingValidationError is the validation error returned by
// Observability_Tracing.Validate if the designated constraints aren't met.
type Observability_TracingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Observability_TracingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Observability_TracingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Observability_TracingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Observability_TracingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Observability_TracingValidationError) ErrorName() string {
	return "Observability_TracingValidationError"
}

// Error satisfies the builtin error interface
func (e Observability_TracingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObservability_Tracing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Observability_TracingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Observability_TracingValidationError{}

// Validate checks the field values on Observability_Metrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Observability_Metrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Observability_Metrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Observability_MetricsMultiError, or nil if none found.
func (m *Observability_Metrics) ValidateAll() error {
	return m.validate(true)
}

func (m *Observability_Metrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Exporter

	// no validation rules for Endpoint

	// no validation rules for Headers

	// no validation rules for Insecure

	if all {
		switch v := interface{}(m.GetInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Observability_MetricsValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Observability_MetricsValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Observability_MetricsValidationError{
				field:  "Interval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisableRuntimeStats

	// no validation rules for Required

	// no validation rules for ResourceAttributes

	if m.GrpcEnabled != nil {
		// no validation rules for GrpcEnabled
	}

	if m.GrpcIncludeHealth != nil {
		// no validation rules for GrpcIncludeHealth
	}

	if len(errors) > 0 {
		return Observability_MetricsMultiError(errors)
	}

	return nil
}

// Observability_MetricsMultiError is an error wrapping multiple validation
// errors returned by Observability_Metrics.ValidateAll() if the designated
// constraints aren't met.
type Observability_MetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Observability_MetricsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Observability_MetricsMultiError) AllErrors() []error { return m }

// Observability_MetricsValidationError is the validation error returned by
// Observability_Metrics.Validate if the designated constraints aren't met.
type Observability_MetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Observability_MetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Observability_MetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Observability_MetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Observability_MetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Observability_MetricsValidationError) ErrorName() string {
	return "Observability_MetricsValidationError"
}

// Error satisfies the builtin error interface
func (e Observability_MetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObservability_Metrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Observability_MetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Observability_MetricsValidationError{}
