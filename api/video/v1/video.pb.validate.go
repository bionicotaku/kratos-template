// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/video/v1/video.proto

package videov1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetVideoDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVideoDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVideoDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVideoDetailRequestMultiError, or nil if none found.
func (m *GetVideoDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVideoDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	if len(errors) > 0 {
		return GetVideoDetailRequestMultiError(errors)
	}

	return nil
}

// GetVideoDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetVideoDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVideoDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVideoDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVideoDetailRequestMultiError) AllErrors() []error { return m }

// GetVideoDetailRequestValidationError is the validation error returned by
// GetVideoDetailRequest.Validate if the designated constraints aren't met.
type GetVideoDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVideoDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVideoDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVideoDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVideoDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVideoDetailRequestValidationError) ErrorName() string {
	return "GetVideoDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVideoDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVideoDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVideoDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVideoDetailRequestValidationError{}

// Validate checks the field values on GetVideoDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVideoDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVideoDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVideoDetailResponseMultiError, or nil if none found.
func (m *GetVideoDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVideoDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVideoDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVideoDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVideoDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVideoDetailResponseMultiError(errors)
	}

	return nil
}

// GetVideoDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetVideoDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVideoDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVideoDetailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVideoDetailResponseMultiError) AllErrors() []error { return m }

// GetVideoDetailResponseValidationError is the validation error returned by
// GetVideoDetailResponse.Validate if the designated constraints aren't met.
type GetVideoDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVideoDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVideoDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVideoDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVideoDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVideoDetailResponseValidationError) ErrorName() string {
	return "GetVideoDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVideoDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVideoDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVideoDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVideoDetailResponseValidationError{}

// Validate checks the field values on VideoDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoDetailMultiError, or
// nil if none found.
func (m *VideoDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoDetailValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoDetailValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoDetailValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for MediaStatus

	// no validation rules for AnalysisStatus

	if all {
		switch v := interface{}(m.GetThumbnailUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoDetailValidationError{
					field:  "ThumbnailUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoDetailValidationError{
					field:  "ThumbnailUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThumbnailUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoDetailValidationError{
				field:  "ThumbnailUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDurationMicros()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoDetailValidationError{
					field:  "DurationMicros",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoDetailValidationError{
					field:  "DurationMicros",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDurationMicros()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoDetailValidationError{
				field:  "DurationMicros",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoDetailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoDetailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoDetailValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoDetailValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoDetailValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoDetailValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VideoDetailMultiError(errors)
	}

	return nil
}

// VideoDetailMultiError is an error wrapping multiple validation errors
// returned by VideoDetail.ValidateAll() if the designated constraints aren't met.
type VideoDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoDetailMultiError) AllErrors() []error { return m }

// VideoDetailValidationError is the validation error returned by
// VideoDetail.Validate if the designated constraints aren't met.
type VideoDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoDetailValidationError) ErrorName() string { return "VideoDetailValidationError" }

// Error satisfies the builtin error interface
func (e VideoDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoDetailValidationError{}
