// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/bionicotaku/kratos-template/internal/clients"
	"github.com/bionicotaku/kratos-template/internal/controllers"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/config_loader/pb"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/grpc_client"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/grpc_server"
	"github.com/bionicotaku/kratos-template/internal/repositories"
	"github.com/bionicotaku/kratos-template/internal/services"
	"github.com/bionicotaku/lingo-utils/gclog"
	"github.com/bionicotaku/lingo-utils/observability"
	"github.com/go-kratos/kratos/v2"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(contextContext context.Context, server *configpb.Server, data *configpb.Data, observabilityConfig observability.ObservabilityConfig, serviceInfo observability.ServiceInfo, config gclog.Config) (*kratos.App, func(), error) {
	component, cleanup, err := gclog.NewComponent(config)
	if err != nil {
		return nil, nil, err
	}
	logger := gclog.ProvideLogger(component)
	observabilityComponent, cleanup2, err := observability.NewComponent(contextContext, observabilityConfig, serviceInfo, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	metricsConfig := observability.ProvideMetricsConfig(observabilityConfig)
	greeterRepo := repositories.NewGreeterRepo(logger)
	clientConn, cleanup3, err := grpcclient.NewGRPCClient(data, metricsConfig, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	greeterRemote := clients.NewGreeterRemote(clientConn, logger)
	greeterUsecase := services.NewGreeterUsecase(greeterRepo, greeterRemote, logger)
	greeterHandler := controllers.NewGreeterHandler(greeterUsecase)
	grpcServer := grpcserver.NewGRPCServer(server, metricsConfig, greeterHandler, logger)
	app := newApp(observabilityComponent, logger, grpcServer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
