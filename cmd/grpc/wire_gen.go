// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/bionicotaku/kratos-template/internal/clients"
	"github.com/bionicotaku/kratos-template/internal/controllers"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/config_loader"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/database"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/grpc_client"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/grpc_server"
	"github.com/bionicotaku/kratos-template/internal/repositories"
	"github.com/bionicotaku/kratos-template/internal/services"
	"github.com/bionicotaku/lingo-utils/gclog"
	"github.com/bionicotaku/lingo-utils/observability"
	"github.com/go-kratos/kratos/v2"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp 构建整个 Kratos 应用，分阶段装配依赖：
// 1. config_loader.ProviderSet：
//   - 基于传入的 Params 解析配置路径、执行 PGV 校验后返回 *loader.Bundle。
//   - 拆分出 ServiceMetadata、Bootstrap(Server/Data) 以及标准化的 ObservabilityConfig。
//   - 基于 ServiceMetadata 预先派生 gclog.Config 与 observability.ServiceInfo。
//
// 2. gclog.ProviderSet：根据 gclog.Config 初始化结构化日志组件，并导出 trace-aware log.Logger。
// 3. observability.ProviderSet：用标准化配置和 ServiceInfo 装配 Tracer/Meter Provider，同时暴露 gRPC 指标配置。
// 4. grpc/grpc_client ProviderSet：使用 Server/Data 配置与观测设置构建入站 gRPC Server、出站 gRPC Client。
// 5. 业务 ProviderSet（clients/repositories/services/controllers）：注入上游依赖形成完整 MVC 调用链。
// 6. newApp：汇总日志器、观测组件与 gRPC Server，返回具备 cleanup 的 kratos.App。
func wireApp(contextContext context.Context, params loader.Params) (*kratos.App, func(), error) {
	bundle, err := loader.ProvideBundle(params)
	if err != nil {
		return nil, nil, err
	}
	observabilityConfig := loader.ProvideObservabilityConfig(bundle)
	serviceMetadata := loader.ProvideServiceMetadata(bundle)
	serviceInfo := loader.ProvideObservabilityInfo(serviceMetadata)
	config := loader.ProvideLoggerConfig(serviceMetadata)
	component, cleanup, err := gclog.NewComponent(config)
	if err != nil {
		return nil, nil, err
	}
	logger := gclog.ProvideLogger(component)
	observabilityComponent, cleanup2, err := observability.NewComponent(contextContext, observabilityConfig, serviceInfo, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	bootstrap := loader.ProvideBootstrap(bundle)
	server := loader.ProvideServerConfig(bootstrap)
	metricsConfig := observability.ProvideMetricsConfig(observabilityConfig)
	data := loader.ProvideDataConfig(bootstrap)
	pool, cleanup3, err := database.NewPgxPool(contextContext, data, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	greeterRepository := repositories.NewGreeterRepo(pool, logger)
	clientConn, cleanup4, err := grpcclient.NewGRPCClient(data, metricsConfig, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	greeterRemote := clients.NewGreeterRemote(clientConn, logger)
	greeterUsecase := services.NewGreeterUsecase(greeterRepository, greeterRemote, logger)
	greeterHandler := controllers.NewGreeterHandler(greeterUsecase)
	videoRepository := repositories.NewVideoRepository(pool, logger)
	videoUsecase := services.NewVideoUsecase(videoRepository, logger)
	videoHandler := controllers.NewVideoHandler(videoUsecase)
	grpcServer := grpcserver.NewGRPCServer(server, metricsConfig, greeterHandler, videoHandler, logger)
	app := newApp(observabilityComponent, logger, grpcServer, serviceMetadata)
	return app, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
