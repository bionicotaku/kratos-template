// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/bionicotaku/kratos-template/internal/controllers"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/config_loader"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/grpc_server"
	"github.com/bionicotaku/kratos-template/internal/repositories"
	"github.com/bionicotaku/kratos-template/internal/services"
	"github.com/bionicotaku/lingo-utils/gcjwt"
	"github.com/bionicotaku/lingo-utils/gclog"
	"github.com/bionicotaku/lingo-utils/gcpubsub"
	"github.com/bionicotaku/lingo-utils/observability"
	"github.com/bionicotaku/lingo-utils/pgxpoolx"
	"github.com/bionicotaku/lingo-utils/txmanager"
	"github.com/go-kratos/kratos/v2"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp 构建整个 Kratos 应用，分阶段装配依赖。
//
// Wire 会根据类型自动解析依赖关系并生成 wire_gen.go，详细的 Provider 列表见文件末尾注释。
//
// 依赖注入顺序:
//  1. 配置加载: configloader.ProviderSet 解析配置并派生组件配置
//  2. 基础设施: gclog → observability → gcjwt → pgxpoolx → txmanager
//  3. 业务层: repositories → services → controllers
//  4. 服务器: grpc_server.ProviderSet 组装 gRPC Server
//  5. 应用: newApp 创建 Kratos App
func wireApp(contextContext context.Context, params loader.Params) (*kratos.App, func(), error) {
	bundle, err := loader.ProvideBundle(params)
	if err != nil {
		return nil, nil, err
	}
	observabilityConfig := loader.ProvideObservabilityConfig(bundle)
	serviceMetadata := loader.ProvideServiceMetadata(bundle)
	serviceInfo := loader.ProvideObservabilityInfo(serviceMetadata)
	config := loader.ProvideLoggerConfig(serviceMetadata)
	component, cleanup, err := gclog.NewComponent(config)
	if err != nil {
		return nil, nil, err
	}
	logger := gclog.ProvideLogger(component)
	observabilityComponent, cleanup2, err := observability.NewComponent(contextContext, observabilityConfig, serviceInfo, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	bootstrap := loader.ProvideBootstrap(bundle)
	server := loader.ProvideServerConfig(bootstrap)
	metricsConfig := observability.ProvideMetricsConfig(observabilityConfig)
	data := loader.ProvideDataConfig(bootstrap)
	gcjwtConfig := loader.ProvideJWTConfig(server, data)
	gcjwtComponent, cleanup3, err := gcjwt.NewComponent(gcjwtConfig, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serverMiddleware, err := gcjwt.ProvideServerMiddleware(gcjwtComponent)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pgxpoolxConfig := loader.ProvidePgxPoolConfig(bundle)
	pgxpoolxComponent, cleanup4, err := pgxpoolx.ProvideComponent(contextContext, pgxpoolxConfig, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pool := pgxpoolx.ProvidePool(pgxpoolxComponent)
	videoRepository := repositories.NewVideoRepository(pool, logger)
	outboxRepository := repositories.NewOutboxRepository(pool, logger)
	txmanagerConfig := loader.ProvideTxManagerConfig(bundle)
	txmanagerComponent, cleanup5, err := txmanager.NewComponent(txmanagerConfig, pool, logger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	manager := txmanager.ProvideManager(txmanagerComponent)
	videoUsecase := services.NewVideoUsecase(videoRepository, outboxRepository, manager, logger)
	videoHandler := controllers.NewVideoHandler(videoUsecase)
	grpcServer := grpcserver.NewGRPCServer(server, metricsConfig, serverMiddleware, videoHandler, logger)
	messaging := loader.ProvideMessagingConfig(bootstrap)
	gcpubsubConfig := loader.ProvidePubsubConfig(messaging)
	dependencies := loader.ProvidePubsubDependencies(logger)
	gcpubsubComponent, cleanup6, err := gcpubsub.NewComponent(contextContext, gcpubsubConfig, dependencies)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	publisher := gcpubsub.ProvidePublisher(gcpubsubComponent)
	outboxPublisherConfig := loader.ProvideOutboxPublisherConfig(messaging)
	v := provideOutboxTask(outboxRepository, publisher, gcpubsubConfig, outboxPublisherConfig, logger)
	subscriber := gcpubsub.ProvideSubscriber(gcpubsubComponent)
	inboxRepository := repositories.NewInboxRepository(pool, logger)
	videoProjectionRepository := repositories.NewVideoProjectionRepository(pool, logger)
	projectionConsumerConfig := loader.ProvideProjectionConsumerConfig(messaging)
	task := provideProjectionTask(subscriber, inboxRepository, videoProjectionRepository, manager, projectionConsumerConfig, logger)
	app := newApp(observabilityComponent, logger, grpcServer, serviceMetadata, v, task)
	return app, func() {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
