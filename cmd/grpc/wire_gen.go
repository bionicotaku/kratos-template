// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/bionicotaku/kratos-template/internal/clients"
	"github.com/bionicotaku/kratos-template/internal/conf"
	"github.com/bionicotaku/kratos-template/internal/controllers"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/data"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/grpc_client"
	"github.com/bionicotaku/kratos-template/internal/infrastructure/grpc_server"
	"github.com/bionicotaku/kratos-template/internal/repositories"
	"github.com/bionicotaku/kratos-template/internal/services"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(server *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := repositories.NewGreeterRepo(dataData, logger)
	clientConn, cleanup2, err := grpcclient.NewGRPCClient(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	greeterRemote := clients.NewGreeterRemote(clientConn, logger)
	greeterUsecase := services.NewGreeterUsecase(greeterRepo, greeterRemote, logger)
	greeterController := controllers.NewGreeterController(greeterUsecase)
	grpcServer := grpcserver.NewGRPCServer(server, greeterController, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
